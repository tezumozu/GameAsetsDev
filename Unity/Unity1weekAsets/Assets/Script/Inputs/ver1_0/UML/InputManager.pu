@startuml InputManager
        class InputManager{
            + const float maxValidFrameCount
            - List< InputData > inputList
            - List< InputData > inputBuffer
            
            + InputManager()
            + InputData[] GetInputList()
            + InputData[] GetInputBuffer()
            + void UpdateInput()
            + void SetInputData()
        }

        abstract class InputMode <<MonoBehaviour>>{
            # bool isActive;
            # [Inject] I_InputDataAddable inputManager;
            
            # [Inject] virtual void InitInput (I_GameModeChangeAlertable gameManager)
        }

        
        class InputData{
            + E_InputType type
            + float frameCount
            + InputData (E_InputType type)
        }

        interface I_InputDataAddable{
            + abstract void AddInputData(InputData data)
        }

        interface I_InputDataUpdatable{
            + abstract InputManager()
            + abstract InputData[] GetInputList()
            + abstract InputData[] GetInputBuffer()
            + abstract void UpdateInput ()
        }

        Enum E_InputData {
            Right
            Left
            Up
            Down
            Jump
            Dush 
            ……
        }
    
    InputManager -down-|> I_InputDataAddable
    InputManager -up-|> I_InputDataUpdatable
    InputManager o-left- InputData
    InputMode -up-> InputData : 生成

    InputMode *-right-> I_InputDataAddable : Zenject.Inject AsSingle
@enduml
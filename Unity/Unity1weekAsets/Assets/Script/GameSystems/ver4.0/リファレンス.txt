Unity1Week用ゲームメインシステムライブラリ

空間名 namespace：Unity1Week_MainGameSystem_v4

概要
1週間ゲームジャムに参加する際に素早くゲームを制作するための基盤として使える
ゲームシステム用のライブラリ&アセット集、ゲームシーンの初期化～読み込みまでのループ、
非MonoBehaviourクラスにおける非同期処理の実現、ゲームの状態管理、ロード画面
、音量のセッティング、が含まれる


クラス詳細
-------------------------------------------------------------------------------------
【SceneGameManager】抽象クラス

-------------------------------------------------------------------------------------
【SceneLoopManager】抽象クラス


-------------------------------------------------------------------------------------
【GameState <T>】抽象クラス
各シーン内におけるゲームの状態を表すクラス。


【コンストラクタ】
・GameState<T>
　引数なし
デフォルトコンストラクタ、詳細は継承先で定義する


【メンバ・プロパティ】
・finishStateSubject
型：Subject<T>
スコープ：private 
　状態における処理が終了したことを通知できるSubject

・disposableList
型：List<IDisposable>
スコープ：protected
　購読しているSubjectのリスト

・FinishStateAsync { get; }
型：IObservable<T> 
スコープ：public
　パラメータfinishStateSubjectの読み取り専用メンバ
プロパティはgetのみ


【メソッド】
・UpdateState　abstract
引数：なし　戻り値：IEnumerator
スコープ：public
　抽象メソッド、継承先のクラスが表す状態における処理を
コルーチンとして定義する


【実装メソッド】
・Dispose
スコープ：public
引数：なし　戻り値：なし
IDisposableにて実装、購読しているSubjectをDisposeする


-------------------------------------------------------------------------------------
【CoroutineHandler】クラス　：SingletonMonoBehaviour
　Task、UniTaskなど並列処理がWebGLで使えないので 
非MonoBehaviourクラス も並列処理ができるようコルーチンを受け取り、管理するクラス。
コルーチンの開始・停止・再開だけでなく、コルーチンのリストを受け取り、複数コルーチン
の開始と終了を監視もできる。SingletonMonoBehaviourを継承する


【コンストラクタ】　親：SingletonMonoBehaviour
・CoroutineHandler
　引数なし
デフォルトコンストラクタ、MonoBehaviourのため呼び出さない


【メンバ】
・activeCoroutinDic　static
型：Dictionary< IEnumerator , bool >
static、private
　登録されているコルーチンの稼働状態を記録する辞書
IEnumerator：登録されているコルーチンのポインタ
bool：そのコルーチンが現在稼働しているかを表すフラグ

・checkerCoroutineDic　static
型：Dictionary< IEnumerator , Coroutine >
スコープ：private
　登録されているコルーチンを記録する辞書
IEnumerator：登録されているコルーチンのポインタ
Coroutine：そのコルーチンの終了を監視するコルーチン


【メソッド】
・UpdateSceneInjection
スコープ：private
引数： I_SceneLoadNoticable sceneloadAsync 戻り値：なし
　シーン切り替え時にZenjectによって呼び出される初期化処理、
基本呼び出さない

・CheckFinishCoroutine
スコープ：private
引数：IEnumerator coroutine 戻り値：IEnumerator 
　静的メソッド、コルーチンの終了を監視するためのコルーチン

・OrderStartCoroutine　static
スコープ：public
引数：IEnumerator coroutine 戻り値：なし
オーバロード：あり（ 引数：List<IEnumerator> coroutineList ）
静的メソッド、コルーチンのポインタを受け取り、そのコルーチンを開始する
登録済みのコルーチンには何もしない、停止している登録済みのコルーチンを渡した場合
そのコルーチンを再開させる。
引数をリストにしたオーバロードがある。リスト内のすべてのコルーチンを開始させる。

・OrderStopCoroutine　static
スコープ：public
引数：IEnumerator coroutine 戻り値：なし
オーバロード：あり（ 引数：List<IEnumerator> coroutineList ）
静的メソッド、コルーチンのポインタを受け取り、そのコルーチンを停止する。
未登録のコルーチンには何もしない、すでに停止している登録済みの場合も同様。
引数をリストにしたオーバロードがある。リスト内のすべてのコルーチンを停止させる。

・OrderKillCoroutine　static
スコープ：public　
引数：IEnumerator coroutine 戻り値：なし
オーバロード：あり（ 引数：List<IEnumerator> coroutineList ）
静的メソッド、コルーチンのポインタを受け取り、そのコルーチンとそれを監視しているコルーチンを停止し辞書から削除する。
未登録のコルーチンには何もしない、すでに停止している登録済みコルーチンの場合は辞書の削除のみ行う。
引数をリストにしたオーバロードがある。リスト内のすべてのコルーチンを停止し辞書から削除する。

・isRegistrationCoroutine　static
スコープ：public
引数：IEnumerator coroutine 戻り値：bool
オーバロード：あり（ 引数：List<IEnumerator> coroutineList ）
静的メソッド、コルーチンのポインタを受け取り、そのコルーチンが登録されているか確認する。
処理が終了したコルーチンは辞書から削除されるため、コルーチンの終了を確認するのにも使える。
true：登録されたコルーチンである ＝　終了していない
false：登録されていないコルーチンである　＝　終了した
引数をリストにしたオーバロードがある。
true：登録されたコルーチンが含まれている ＝　全て終了していない
false：全て登録されていないコルーチンである　＝　全て終了した


【継承メソッド】
・OnInitalize()
スコープ：protected
引数：なし　戻り値：なし
SingletonMonoBehaviourから継承、オブジェクトが生成される際の初期化処理


-------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------
【】クラス

-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------


【インタフェース】概要
-------------------------------------------------------------------------------------
【I_SceneLoadNoticable】インタフェース

【プロパティ】
・IObservable<E_SceneName> SceneLoadAsync { get; }
ゲームシーンのロード開始を通知するIObservable

【メソッド】
なし

-------------------------------------------------------------------------------------


【Enum】
-------------------------------------------------------------------------------------
【E_SceneName】
シーン名を表すEnum、実際にこのライブラリを使うときは、
ここに制作したシーン名を追加して使用する

【値】
Sample

-------------------------------------------------------------------------------------

@startuml GameLoopManager

    class GameLoopManager<<MonoBehaviour>>{
        - E_LoopState currentState
        - bool isHaveToLoading
        - UniTask initAsync
        - SceneLoader sceneLoader
        - E_SceneName nextScene
        - [Inject] SceneObjectUpdateManager UpdateManager

        - [Inject] void OnInitialize(I_SceneLoadAlertable gameManager)
        - Start()
        - Update()
        - activeIsHaveToLoad()
    }

    enum E_LoopState {
        Init
        Update
        Loading
    }


    class SceneLoader{
        - AsyncOperation asyncLoad;

        + IEnumerator LoadScene(E_SceneName sceneName)
    }


    abstract class SceneObjectUpdateManager{
        - [Zenject.Inject] I_InputUpdatable inputManager
        - [Zenject.Inject] GameManager gameManager

        + void InitObject()
        + void UpdateObject()
        + void ReleaseObject()
    }


    interface I_SceneLoadAlertable{
        + void abstract ObserveSceneLoadAlert(Action<E_SceneName> action)
    }


    abstract class GameManager {
        # Scubject<E_SceneName> sceneLoadAlertSubject
        # Subject<E_GameMode> GameModeChangeAlertSubject;

        + void ObserveSceneLoadAlert(Action<E_SceneName> action)
        + void ObserveGameModeChange(Action<E_GameMode> action)
    }

    interface I_GameModeChangeAlertable{
        + abstract void ObserveGameModeChange(Action<E_GameMode> action)
    }

    class InputManager{
        + const float maxValidFrameCount
        - List< InputData > inputList
        - List< InputData > inputBuffer
        
        + InputManager()
        + InputData[] GetInputList()
        + InputData[] GetInputBuffer()
        + void UpdateInput()
        + void SetInputData()
    }


    abstract class InputMode<<MonoBehaviour>>{
        # bool isActive;
        # Dictionary < E_InputType , bool> isHoldDic;
        # [SerializeField] readonly E_GameMode ownMode;
        # [Inject] I_InputDataAddable inputManager;
        
        # [Inject] virtual void InitInput (I_GameModeChangeAlertable gameManager)
        # virtual void changeGameMopde(E_GameMode nextMode)
    }


    class InputData{
        + E_InputType type
        + float frameCount
        + InputData (E_InputType type)
    }


    interface I_InputDataAddable{
        + abstract InputManager()
        + abstract InputData[] GetInputList()
        + abstract InputData[] GetInputBuffer()
    }


    interface I_InputDataUpdatable{
        + abstract void SetInputData()
    }


    GameLoopManager -right-> I_SceneLoadAlertable : Observe
    GameLoopManager *--> SceneObjectUpdateManager
    GameLoopManager *-left-> SceneLoader

    GameManager -up-|> I_SceneLoadAlertable
    GameManager --|> I_GameModeChangeAlertable

    InputMode -up-> I_GameModeChangeAlertable : Observe
    InputMode *-left-> I_InputDataAddable : Zenject.Inject AsSingle

    SceneObjectUpdateManager *-right-> GameManager : Zenject.Inject AsSingle
    SceneObjectUpdateManager *-left-> I_InputDataUpdatable : Zenject.Inject AsSingle

    E_LoopState --+ GameLoopManager

    InputManager --|> I_InputDataAddable
    InputManager -up-|> I_InputDataUpdatable
    InputManager o-left- InputData

    
    

@enduml